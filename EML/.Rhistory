# Purpose - to parse the hierarchy string column of TSN values
# Then join them to a lookup table from ITIS_longnames
library(tidyverse)
TSNhierarchy <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Hierarchy_Taxa.csv")
TSNlongnames <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Itis_longnames.csv")
# select the hierarchy string column
# and parse the first 7 values in separate columns
hierarchy = as_tibble(TSNhierarchy)
longnames = as_tibble(TSNlongnames)
my_string <- hierarchy |>
select(hierarchy_string )
my_string
my_columns <- my_string |>
separate_wider_delim(
hierarchy_string,
delim = "-",
names = c("col1", "col2", "col3", "col4",
"col5", "col6", "col7", "col8", "col9"),
too_many = "drop"
)
my_columns
print(my_columns, n = 207)
# Join my_columns to longnames
# PK in longnames is tsn
# Need to convert my_columns all to dbl
# Then set PK in longnames to be tsn
# Then process each column as an FK
# to get the value for complete name from longnames
glimpse(TSNhierarchy)
glimpse(TSNlongnames)
library(tidyverse)
TSNhierarchy <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Hierarchy_Taxa.csv")
TSNlongnames <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Itis_longnames.csv")
glimpse(TSNhierarchy)
glimpse(TSNlongnames)
# Purpose - to parse the hierarchy string column of TSN values
# Then join them to a lookup table from ITIS_longnames
library(tidyverse)
TSNhierarchy <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Hierarchy_Taxa.csv")
TSNlongnames <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Itis_longnames.csv")
glimpse(TSNhierarchy)
glimpse(TSNlongnames)
# select the hierarchy string column
# and parse the first 7 values in separate columns
hierarchy = as_tibble(TSNhierarchy)
longnames = as_tibble(TSNlongnames)
my_string <- hierarchy |>
select(hierarchy_string )
my_string
my_columns <- my_string |>
separate_wider_delim(
hierarchy_string,
delim = "-",
names = c("col1", "col2", "col3", "col4",
"col5", "col6", "col7", "col8", "col9"),
too_many = "drop"
)
my_columns
print(my_columns, n = 207)
# Join my_columns to longnames
# PK in longnames is tsn
# Need to convert my_columns all to dbl
# Then set PK in longnames to be tsn
# Then process each column as an FK
# to get the value for complete name from longnames
# Purpose - to parse the hierarchy string column of TSN values
# Then join them to a lookup table from ITIS_longnames
library(tidyverse)
TSNhierarchy <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Hierarchy_Taxa.csv")
TSNlongnames <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Itis_longnames.csv")
glimpse(TSNhierarchy)
glimpse(TSNlongnames)
# select the hierarchy string column
# and parse the first 7 values in separate columns
hierarchy = as_tibble(TSNhierarchy)
longnames = as_tibble(TSNlongnames)
my_string <- hierarchy |>
select(hierarchy_string )
my_string
my_columns <- my_string |>
separate_wider_delim(
hierarchy_string,
delim = "-",
names = c("col1", "col2", "col3", "col4",
"col5", "col6", "col7", "col8", "col9"),
too_many = "drop"
)
my_columns
print(my_columns, n = 207)
# Join my_columns to longnames
# PK in longnames is tsn
# Need to convert my_columns all to dbl
# Then set PK in longnames to be tsn
# Then process each column as an FK
# to get the value for complete name from longnames
TSNlongnames2 <- as.character(TSNlongnames)
# Purpose - to parse the hierarchy string column of TSN values
# Then join them to a lookup table from ITIS_longnames
library(tidyverse)
TSNhierarchy <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Hierarchy_Taxa.csv")
TSNlongnames <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Itis_longnames.csv")
glimpse(TSNhierarchy)
glimpse(TSNlongnames)
# select the hierarchy string column
# and parse the first 7 values in separate columns
hierarchy = as_tibble(TSNhierarchy)
longnames = as_tibble(TSNlongnames)
my_string <- hierarchy |>
select(hierarchy_string )
my_string
my_columns <- my_string |>
separate_wider_delim(
hierarchy_string,
delim = "-",
names = c("col1", "col2", "col3", "col4",
"col5", "col6", "col7", "col8", "col9"),
too_many = "drop"
)
my_columns
print(my_columns, n = 207)
# Join my_columns to longnames
# PK in longnames is tsn
# Need to convert col1 -> col9 to dbl to match tsn
# TSNLongnames is too long to cast to other datatype
# convert to numeric
my_columns_dbl = as.numeric( my_columns )
my_columns_dbl = as.numeric(col1)
my_columns
my_col_nums = as.numeric(my_columns)
col1_num <- as.numeric( my_columns |>
select( col1 ))
# Convert list to numeric
numeric_vector <- as.numeric(unlist(my_columns))
# Print the numeric equivalent
print(numeric_vector)
numeric_vector
my_columns
longnames
my_columns
longnames
# Purpose - to parse the hierarchy string column of TSN values
# Then join them to a lookup table from ITIS_longnames
library(tidyverse)
TSNhierarchy <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Hierarchy_Taxa.csv")
TSNlongnames <- read_csv(
"C:\\Users\\growell\\HTLN-BreedingBird-Data-Package\\src\\Itis_longnames.csv")
glimpse(TSNhierarchy)
glimpse(TSNlongnames)
# select the hierarchy string column
# and parse the first 7 values in separate columns
hierarchy = as_tibble(TSNhierarchy)
longnames = as_tibble(TSNlongnames)
my_string <- hierarchy |>
select(hierarchy_string )
my_string
my_columns <- my_string |>
separate_wider_delim(
hierarchy_string,
delim = "-",
names = c("col1", "col2", "col3", "col4",
"col5", "col6", "col7", "col8", "col9"),
too_many = "drop"
)
my_columns
longnames
# convert all character to char to numeric
my_numbers <- my_columns|> mutate_if(where(is.character), as.double)
my_columns
my_numbers
# Joins on tsn
longnames |>
count(tsn) |>
filter(n > 1)
########## completename from col1
my_numbers_col1 <- rename(my_numbers, tsn = col1)
my_numbers_col1
my_join_col1 = my_numbers_col1 |>
inner_join(longnames, join_by(tsn))
my_join_col1
############## more completenames
my_numbers_col2 <- rename(my_numbers, tsn = col2)
my_numbers_col2
my_join_col2 = my_numbers_col2 |>
inner_join(longnames, join_by(tsn))
my_join_col2
############## more completenames
my_numbers_col3 <- rename(my_numbers, tsn = col3)
my_numbers_col3
my_join_col3 = my_numbers_col3 |>
inner_join(longnames, join_by(tsn))
my_join_col3
############## more completenames
my_numbers_col4 <- rename(my_numbers, tsn = col4)
my_numbers_col4
my_join_col4 = my_numbers_col4 |>
inner_join(longnames, join_by(tsn))
my_join_col4
############## more completenames
my_numbers_col5 <- rename(my_numbers, tsn = col5)
my_numbers_col5
my_join_col5 = my_numbers_col5 |>
inner_join(longnames, join_by(tsn))
my_join_col5
############## more completenames
my_numbers_col6 <- rename(my_numbers, tsn = col6)
my_numbers_col6
my_join_col6 = my_numbers_col6 |>
inner_join(longnames, join_by(tsn))
my_join_col6
############## more completenames
my_numbers_col7 <- rename(my_numbers, tsn = col7)
my_numbers_col7
my_join_col7 = my_numbers_col7 |>
inner_join(longnames, join_by(tsn))
my_join_col7
############## more completenames
my_numbers_col8 <- rename(my_numbers, tsn = col8)
my_numbers_col8
my_join_col8 = my_numbers_col8 |>
inner_join(longnames, join_by(tsn))
my_join_col8
############## more completenames
my_numbers_col9 <- rename(my_numbers, tsn = col9)
my_numbers_col9
my_join_col9 = my_numbers_col9 |>
inner_join(longnames, join_by(tsn))
my_join_col9
library("lubridate", "tidyverse", "NPSdataverse")S
library("lubridate", "tidyverse", "NPSdataverse")
install_github("nationalparkservice/NPSdataverse")
library(devtools)
install_github("nationalparkservice/NPSdataverse")
library(tidyverse)
basalarea <- read_csv("src/BasalArea.csv")
pwd
getwd()
basalarea <- read_csv("./BasalArea.csv")
glimpse(basalarea)
basalarea |> distinct(ParkUnit)
basalarea |> distinct(ParkUnit) |>
group_by(ParkUnit) |> summarize(n = n())
MyData <- basalarea |> select(ParkUnit)
ggplot(MyData, aes(x = ParkUnit)) +
geom_bar()
glimpse(basalarea)
basalarea |> distinct(Plot)
basalarea |> distinct(Plot) |>
summarize(n = n())
MyData <- basalarea |> select(Plot)
basalarea |> distinct(Plot)
basalarea |> distinct(Plot) |>
print(n = 501)
basalarea |> distinct(Plot) |>
group_by(Plot) |> summarize(n = n())
basalarea |>
group_by(Plot) |> summarize(n = n())
basalarea |> distinct(Plot) |>
print(n = 501)
MyData <- basalarea |> select(Plot)
ggplot(MyData, aes(x = Plot)) +
geom_bar()
MyData <- basalarea |> select(ParkUnit, Plot)
ggplot(MyData, aes(x = ParkUnit)) +
geom_bar()
glimpse(basalarea)
basalarea |> distinct(Subplot) |>
print(n = 5)
basalarea |> distinct(SubPlot) |>
print(n = 5)
basalarea |> distinct(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n())
basalarea |> select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n())
basalarea |> select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n())
basalarea |> select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
basalarea |> select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
basalarea |> filter(SubPlot == 0) |>
select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
# Variable: SubPlot --------------------------------------------------------------
# Unique list - 0's were used for SubPlot values
# SubPlot frequencies - Need to flag use of 0 in all habitat
library(tidyverse)
basalarea <- read_csv("./BasalArea.csv")
glimpse(basalarea)
basalarea |> distinct(SubPlot) |>
print(n = 5)
basalarea |> filter(SubPlot == 0) |>
select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
basalarea_0s <- basalarea |> filter(SubPlot == 0) |>
select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
basalarea_0s <- basalarea |> filter(SubPlot == 0) |>
select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
basalarea_0s
view(basalarea_0s
view(basalarea_0s)
view("basalarea_0s")
basalarea |> filter(SubPlot == 0) |>
select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
library(tidyverse)
# library(data.table)
birdobs <- read_csv("src/BirdObservationsThru2022_3.csv")
library(tidyverse)
basalarea <- read_csv("./src/BasalArea.csv")
basalarea <- read_csv("./src/BasalArea.csv")
getwd)()
getwd()
library(tidyverse)
basalarea <- read_csv("./BasalArea.csv")
glimpse(basalarea)
# Variable: ParkUnit --------------------------------------------------------------
# Unique list - PASS
# Plot frequencies - PASS
basalarea |> distinct(ParkUnit)
basalarea |> distinct(ParkUnit) |>
group_by(ParkUnit) |> summarize(n = n())
MyData <- basalarea |> select(ParkUnit)
ggplot(MyData, aes(x = ParkUnit)) +
geom_bar()
library(tidyverse)
basalarea <- read_csv("./BasalArea.csv")
glimpse(basalarea)
# Variable: ParkUnit --------------------------------------------------------------
# Unique list - PASS
# Plot frequencies - PASS
basalarea |> distinct(ParkUnit)
basalarea |> distinct(ParkUnit) |>
group_by(ParkUnit) |> summarize(n = n())
MyData <- basalarea |> select(ParkUnit)
ggplot(MyData, aes(x = ParkUnit)) +
geom_bar()
# Variable: Plot --------------------------------------------------------------
# Unique list - PASS
# Plot frequencies - PASS
basalarea |> distinct(Plot) |>
print(n = 501)
MyData <- basalarea |> select(ParkUnit, Plot)
ggplot(MyData, aes(x = ParkUnit)) +
geom_bar()
# Variable: SubPlot --------------------------------------------------------------
# Unique list - PASS
# SubPlot frequencies - PASS
basalarea |> distinct(SubPlot) |>
print(n = 5)
basalarea |>
select(ParkUnit, SubPlot) |>
group_by(ParkUnit, SubPlot) |> summarize(n = n()) |>
print(n = 26)
# Variable: EventDate --------------------------------------------------------------
# Unique list - PASS
# EventDate frequencies - PASS
basalarea |> distinct(EventDate) |>
arrange(EventDate) |> print(n = 168)
basalarea |> distinct(Plot, EventDate) |>
group_by(Plot) |> summarize(n = n()) |>
print(n = 501)
glimpse(basalarea)
# Variable: CanopyType --------------------------------------------------------------
# Unique list - PASS
# CanopyType frequencies - PASS
basalarea |> distinct(CanopyType)
basalarea |>
select(Plot, CanopyType) |>
group_by(Plot, CanopyType) |>
arrange(Plot) |> summarize(n = n()) |>
print(n = 913)
# Variable: CanopyCount --------------------------------------------------------------
# Histogram of count - PASS
# CanopyCount frequencies - PASS
view(basalarea)
basalarea |> filter(CanopyCount == 0) |>
print(n = 350)
ggplot(basalarea, aes(x = CanopyCount)) +
geom_bar()
basalarea |> count (CanopyCount) |> arrange (CanopyCount, (n))
birdobs <- read_csv("src/BirdObservationsThru2022_3.csv")
library(tidyverse)
canopycover <- read_csv("./src/CanopyCover.csv")
setwd('./HTLN-BreedingBird-Data-Package')
setwd('~/HTLN-BreedingBird-Data-Package')
library(tidyverse)
mydata <- read_csv("./src/TreeTally.csv")
canopyheight <- read_csv("./src/CanopyHeight.csv")
pwd
getwd()
canopyheight <- read_csv("./CanopyHeight.csv")
library(tidyverse)
library(writexl)
library(readxl)
canopyheight <- read_csv("./CanopyHeight.csv")
glimpse(canopyheight)
ggplot(MyData, aes(x = CanopyHeight)) +
geom_bar()
MyData <- canopyheight |> select(CanopyHeight) |>
filter(CanopyHeight > 0)
ggplot(MyData, aes(x = CanopyHeight)) +
geom_bar()
canopyheight35s <- canopyheight |>
filter(CanopyHeight >34)
ggplot(canopyheight35s, aes(x = CanopyHeight)) +
geom_bar()
write_xlsx(canopyheight35s, "canopyheight0s.xlsx")
write_xlsx(canopyheight35s, "canopyheight35s.xlsx")
